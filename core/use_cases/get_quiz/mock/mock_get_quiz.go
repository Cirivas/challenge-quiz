// Code generated by MockGen. DO NOT EDIT.
// Source: get_quiz.go

// Package mock_get_quiz is a generated GoMock package.
package mock_get_quiz

import (
	reflect "reflect"

	entities "github.com/cirivas/challenge-quiz/core/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockGetQuizUseCase is a mock of GetQuizUseCase interface.
type MockGetQuizUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGetQuizUseCaseMockRecorder
}

// MockGetQuizUseCaseMockRecorder is the mock recorder for MockGetQuizUseCase.
type MockGetQuizUseCaseMockRecorder struct {
	mock *MockGetQuizUseCase
}

// NewMockGetQuizUseCase creates a new mock instance.
func NewMockGetQuizUseCase(ctrl *gomock.Controller) *MockGetQuizUseCase {
	mock := &MockGetQuizUseCase{ctrl: ctrl}
	mock.recorder = &MockGetQuizUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetQuizUseCase) EXPECT() *MockGetQuizUseCaseMockRecorder {
	return m.recorder
}

// GetQuiz mocks base method.
func (m *MockGetQuizUseCase) GetQuiz(quizId string) (*entities.Quiz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuiz", quizId)
	ret0, _ := ret[0].(*entities.Quiz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuiz indicates an expected call of GetQuiz.
func (mr *MockGetQuizUseCaseMockRecorder) GetQuiz(quizId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuiz", reflect.TypeOf((*MockGetQuizUseCase)(nil).GetQuiz), quizId)
}
